package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"strings"

	"github.com/rs/zerolog/log"
)

type OllamaRequest struct {
	Model   string `json:"model"`
	Prompt  string `json:"prompt"`
	System  string `json:"system"`
	Context []int  `json:"context,omitempty"`
	Stream  bool   `json:"stream"`
	// Limit response tokens
	EvalCount    int     `json:"eval_count,omitempty"`
	EvalDuration int     `json:"eval_duration,omitempty"`
	Options      Options `json:"options,omitempty"`
}

type Options struct {
	Temperature      float64 `json:"temperature,omitempty"`
	TopP             float64 `json:"top_p,omitempty"`
	FrequencyPenalty float64 `json:"frequency_penalty,omitempty"`
	PresencePenalty  float64 `json:"presence_penalty,omitempty"`
}

// generateRecommendation generates a comprehensive patch recommendation based on the project and related CVEs
func generateRecommendation(decision string, similarCves []string) (string, error) {
	inputText := fmt.Sprintf(`As a cybersecurity expert, analyze the given project information and provide a comprehensive list of CVEs (Common Vulnerabilities and Exposures)
or significant security vulnerabilities that are directly relevant to this project. For each identified issue, briefly explain its nature and potential impact on the project.
Include only information that could significantly influence decision-making regarding the project's security posture. If no specific CVEs are applicable, highlight general
vulnerability categories that may be relevant.

Project Information: %s
Similar CVEs: %s

Focus solely on vulnerabilities and recommendations directly applicable to the project. Ignore any CVEs or information that doesn't seem relevant.
Provide your briefly response in a structured format, using markdown for readability. If you're unsure about any specific recommendation, clearly state that uncertainty.`,
		decision,
		strings.Join(similarCves, "\n"),
	)

	log.Info().Msg("Generating patch recommendation...")

	// Create the request
	ollamaReq := OllamaRequest{
		Model:        os.Getenv("OLLAMA_MODEL"),
		Prompt:       inputText,
		System:       "You are a cybersecurity expert providing comprehensive vulnerability assessments.",
		Stream:       false,
		EvalCount:    500,
		EvalDuration: 4232710000 * 0.5,
		Options: Options{
			Temperature:      0.3,
			TopP:             1,
			FrequencyPenalty: 0.2,
			PresencePenalty:  0.2,
		},
	}

	log.Info().Msg("Sending request to Ollama...")

	// Convert request to JSON
	jsonData, err := json.Marshal(ollamaReq)
	if err != nil {
		log.Error().Err(err).Msg("failed to marshal JSON")
	}

	ollamaReqUrl := fmt.Sprintf("http://%s/api/generate", os.Getenv("OLLAMA_HOST"))

	// Make the HTTP POST request
	resp, err := http.Post(ollamaReqUrl,
		"application/json",
		bytes.NewBuffer(jsonData))
	if err != nil {
		log.Error().Err(err).Msg("failed to make HTTP request")
	}
	defer resp.Body.Close()

	// Read the response
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Error().Err(err).Msg("failed to read response body")
	}

	// Parse the response
	var result map[string]interface{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		log.Error().Err(err).Msg("failed to unmarshal JSON")
	}

	log.Info().Msg("Successfully generated patch recommendation")

	response := result["response"].(string)

	log.Info().Msgf("Response: %s", response[:50]+"...\n"+response[len(response)-100:])

	return result["response"].(string), nil
}
