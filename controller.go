package main

import (
	"context"
	"fmt"
	"strings"

	"github.com/sashabaranov/go-openai"
)

// generateRecommendation generates a comprehensive patch recommendation based on the project and related CVEs
func generateRecommendation(client *openai.Client, decision string, similarCves []string) (string, error) {
	inputText := fmt.Sprintf(`You are a cybersecurity expert tasked with providing comprehensive vulnerability and patch recommendations. Consider the following:

Project: %s
Related CVEs:
%s

Based on this information:
1. Identify all potential vulnerabilities that could affect the project.
2. For each vulnerability, provide:
   a) A brief description of the vulnerability
   b) The potential impact on the project
   c) Recommended patches or mitigation strategies
3. Suggest any additional security measures or best practices relevant to the project.
4. If there are any conflicting recommendations or trade-offs, highlight them.

Focus solely on vulnerabilities and recommendations directly applicable to the project. Ignore any CVEs or information that doesn't seem relevant.
Provide your response in a structured format, using markdown for readability. If you're unsure about any specific recommendation, clearly state that uncertainty.`,
		decision, strings.Join(similarCves, "\n"))

	resp, err := client.CreateChatCompletion(
		context.Background(),
		openai.ChatCompletionRequest{
			Model: openai.GPT3Dot5Turbo,
			Messages: []openai.ChatCompletionMessage{
				{Role: openai.ChatMessageRoleSystem, Content: "You are a cybersecurity expert providing comprehensive vulnerability assessments and patch recommendations."},
				{Role: openai.ChatMessageRoleUser, Content: inputText},
			},
			MaxTokens:        800,
			Temperature:      0.3,
			TopP:             1,
			FrequencyPenalty: 0.2,
			PresencePenalty:  0.2,
		},
	)

	if err != nil {
		return "", fmt.Errorf("failed to generate patch recommendation: %v", err)
	}

	return resp.Choices[0].Message.Content, nil
}
